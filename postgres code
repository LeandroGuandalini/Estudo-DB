-- Criação dos tipos ENUM no PostgreSQL
CREATE TYPE situacao_enum AS ENUM('ATIVO', 'INATIVO');
CREATE TYPE situacao_lancamento_enum AS ENUM('PAGO', 'PENDENTE');

-- Tabela: cliente
CREATE TABLE cliente (
    id SERIAL PRIMARY KEY,
    nome_empresarial VARCHAR(255) NOT NULL,
    cnpj VARCHAR(18) NOT NULL,
    ie VARCHAR(15),
    email VARCHAR(255),
    website VARCHAR(255),
    telefone VARCHAR(15),
    cep VARCHAR(9),
    endereco VARCHAR(255),
    numero VARCHAR(255),
    complemento VARCHAR(255),
    bairro VARCHAR(255),
    cidade VARCHAR(255),
    estado CHAR(2),
    nota INTEGER,
    situacao situacao_enum NOT NULL
);

-- Tabela: fornecedor
CREATE TABLE fornecedor (
    id SERIAL PRIMARY KEY,
    nome_empresarial VARCHAR(255) NOT NULL,
    cnpj VARCHAR(18) NOT NULL,
    ie VARCHAR(15),
    email VARCHAR(255),
    website VARCHAR(255),
    telefone VARCHAR(15),
    cep VARCHAR(9),
    endereco VARCHAR(255),
    numero VARCHAR(255),
    complemento VARCHAR(255),
    bairro VARCHAR(255),
    cidade VARCHAR(255),
    estado CHAR(2),
    nota INTEGER,
    situacao situacao_enum NOT NULL
);

-- Tabela: conta
CREATE TABLE conta (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    agencia VARCHAR(255) NOT NULL,
    conta_corrente VARCHAR(255) NOT NULL,
    data_inclusao TIMESTAMP NOT NULL,
    observacao TEXT,
    situacao situacao_enum NOT NULL
);

-- Tabela: contato
CREATE TABLE contato (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    departamento VARCHAR(255),
    cpf VARCHAR(14) NOT NULL,
    email VARCHAR(255),
    telefone VARCHAR(15),
    situacao situacao_enum NOT NULL,
    id_cliente INTEGER NOT NULL,
    FOREIGN KEY (id_cliente) REFERENCES cliente (id)
);

-- Tabela: categoria
CREATE TABLE categoria (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    debito BOOLEAN,
    credito BOOLEAN,
    situacao situacao_enum NOT NULL,
    id_pai INTEGER,
    FOREIGN KEY (id_pai) REFERENCES categoria (id)
);

-- Tabela: lancamento
CREATE TABLE lancamento (
    id SERIAL PRIMARY KEY,
    parcela INTEGER NOT NULL,
    total_parcelas INTEGER NOT NULL,
    valor DECIMAL(10, 2) NOT NULL,
    data_lancamento TIMESTAMP NOT NULL,
    data_vencimento TIMESTAMP NOT NULL,
    descricao TEXT,
    situacao situacao_lancamento_enum NOT NULL,
    id_conta INTEGER NOT NULL,
    id_categoria INTEGER NOT NULL,
    id_cliente INTEGER,
    id_fornecedor INTEGER,
    FOREIGN KEY (id_conta) REFERENCES conta (id),
    FOREIGN KEY (id_categoria) REFERENCES categoria (id),
    FOREIGN KEY (id_cliente) REFERENCES cliente (id),
    FOREIGN KEY (id_fornecedor) REFERENCES fornecedor (id)
);

--necessariamente precisa conter nas duas tabelas para aparecer com INNER JOIN
SELECT a.*, b.*
FROM cliente a
INNER JOIN contato b ON a.id = b.id_cliente

INSERT INTO cliente (id,nome_empresarial,cnpj,ie,email,website,telefone,cep,endereco,complemento,bairro,cidade,estado,nota,situacao)
VALUES (11,'JRT Representações', '21.687.974/0001-88',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'ATIVO')

--Não precisa existir nas duas tabelas, somente na primeira (esquerda, tabela a), o where retorna somento o item com id 11, inserido acima
SELECT a.*, b.*
FROM cliente a
LEFT JOIN contato b ON a.id = b.id_cliente
WHERE a.id = 11

--Não precisa existir nas duas tabelas, somente na segunda (direita, tabela b)
--Não exibirá nada pois o id 11 só existe na tabela a
SELECT a.*, b.*
FROM cliente a
RIGHT JOIN contato b ON a.id = b.id_cliente
WHERE a.id = 11

--"SELF JOIN" tá mostrando uma subcategoria do custo fixo, nesse caso. O aluguel faz parte do custo fixo e possui um id_pai de 1. Assim retorna todos os custos fixos que existem na tabela
SELECT a.*
FROM categoria a
INNER JOIN categoria b ON a.id_pai = b.id
WHERE a.id_pai = 1

--outra forma de combinar, usando SELECT (quando não tem chave estrangeira, por exemplo)
SELECT cidade, estado FROM cliente
UNION
SELECT cidade, estado FROM fornecedor
ORDER BY cidade, estado

--mesma coisa do de cima, mas aparece repetição
SELECT cidade, estado FROM cliente
UNION ALL
SELECT cidade, estado FROM fornecedor
ORDER BY cidade, estado

SELECT nome_empresarial AS "nome empresarial", cnpj, nota FROM cliente
UNION ALL
SELECT nome_empresarial AS "nome empresarial", cnpj, nota FROM fornecedor
ORDER BY 1

--Seleciona todos os clientes que estão no mesmo estado dos fornecedores que estão na cidade de 'Sorocaba'
SELECT *
FROM cliente
WHERE estado IN (SELECT estado
				FROM fornecedor
				WHERE cidade = 'Sorocaba'
				)
